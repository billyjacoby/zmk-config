/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

&spi1 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    mosi-pin = <6>;

    // Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.

    sck-pin = <5>;
    miso-pin = <7>;

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";
        label = "WS2812";

        /* SPI */

        reg = <0>;/* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */

        chain-length = <27>;/* arbitrary; change at will */
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

/ {
    chosen {
        zmk,underglow = &led_strip;
    };
};

/ {
    macros {
        macro_cmd_space: macro_cmd_space {
            compatible = "zmk,behavior-macro";
            label = "macro_cmd_space";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };
        macro_arrow_function: macro_arrow_function {
            compatible = "zmk,behavior-macro";
            label = "macro_arrow_function";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_tap>,
                <&kp GREATER_THAN>;
        };
        control_right: control_right {
            compatible = "zmk,behavior-macro";
            label = "control_right";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_CONTROL>;
        };
        control_left: control_left {
            compatible = "zmk,behavior-macro";
            label = "control_left";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LEFT_CONTROL>;
        };
        emoji_press: emoji_press {
            compatible = "zmk,behavior-macro";
            label = "emoji_press";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_COMMAND>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_COMMAND>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        ht_tp: hold_tap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TAP_PREFERRED";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp &kp>;
        };
        td_arrow_function: tap_dance_arrow_function {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ARROW_FUNCTION";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp SEMI>,
                <&macro_arrow_function>;
        };
        td_brackets_open: tap_dance_brackets_open {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BRACKETS_OPEN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp LBKT>,
                <&kp LEFT_BRACE>;
        };
        td_brackets_close: tap_dance_brackets_close {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BRACKETS_CLOSE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp RIGHT_PARENTHESIS>,
                <&kp RBKT>,
                <&kp RIGHT_BRACE>;
        };
    };

    combos {
        compatible = "zmk,combos";

        raycast {
            bindings = <&macro_cmd_space>;
            key-positions = <53 42>;
            layers = <0 3 1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
        &kp ESC   &kp Q   &kp W         &kp E   &kp R              &kp T      &kp Y      &kp U             &kp I    &kp O     &kp P          &kp BSPC
 &kp LEFT_SHIFT   &kp A   &kp S         &kp D   &kp F              &kp G      &kp H      &kp J             &kp K    &kp L  &kp SEMI         &kp MINUS
        &kp TAB   &kp Z   &kp X         &kp C   &kp V              &kp B      &kp N      &kp M         &kp COMMA  &kp DOT  &kp FSLH  &kp SINGLE_QUOTE
                                 &kp LEFT_ALT   &mo 1  &ht_tp LGUI SPACE  &lt 2 RET  &kp GRAVE  &kp LEFT_CONTROL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
         &kp TAB        &kp N1        &kp N2        &kp N3        &kp N4         &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp BSPC
          &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_CLR   &none   &none   &none   &none   &none     &none
 &rgb_ug RGB_TOG         &none         &none         &none         &none  &kp LG(SPACE)   &none   &none   &none   &none   &none     &none
                                                    &trans        &trans         &trans  &trans  &trans  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
 &kp EQUAL        &kp EXCL           &kp AT  &kp HASH  &kp DLLR      &kp PRCNT  &kp CARET  &kp AMPS  &kp KP_MULTIPLY   &kp LPAR       &kp RPAR  &kp BSPC
    &trans        &kp LBKT         &kp RBKT     &none     &none          &none      &none     &none           &kp UP      &none          &none     &none
     &none  &kp LEFT_BRACE  &kp RIGHT_BRACE     &none     &none  &kp LG(SPACE)      &none  &kp LEFT         &kp DOWN  &kp RIGHT  &kp BACKSLASH     &none
                                               &trans    &trans         &trans     &trans    &trans           &trans
            >;
        };

        LOWER_RAISE {
            bindings = <
          &trans            &none            &none            &none            &none       &kp LC(LEFT)       &kp RC(RIGHT)   &none  &kp F12           &kp C_VOL_DN  &kp C_VOL_UP  &trans
 &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &td_brackets_open  &td_brackets_close   &none    &none                  &none         &none   &none
 &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD              &none               &none   &none    &none  &macro_arrow_function         &none  &trans
                                                             &trans           &trans             &trans              &trans  &trans   &trans
            >;
        };
    };
};
